/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict admin-only access model for most collections, with public read access to specific announcement-related data.
 *
 * Data Structure:
 * - Top-level collections: /services, /projects, /blogPosts, /careers, /faqs, /teamMembers, /academyCourses, /privacyPolicy, /termsOfService, /announcements
 * - Subcollections: /academyCourses/{academyCourseId}/batches/{academyBatchId}
 * - Special documents: /announcements/nextBatch, /announcements/currentBatch
 *
 * Key Security Decisions:
 * - Admin-Only Access: All major content collections (services, projects, blog posts, etc.) are only accessible to authorized admins.
 * - No User Listing: Listing of users or any other collections is explicitly denied to prevent information disclosure.
 * - Public Announcements: Read access to the /announcements collection and its subcollections is open to the public to display current and upcoming batch information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param None
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Denies all operations for unauthenticated users.
     */
    match /{path=**} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Rules for the /services collection. Only accessible to admins.
     * @path /services/{serviceId}
     * @allow (create) Authenticated admin can create a service.
     * @deny (create) Non-authenticated user cannot create a service.
     * @principle Enforces admin-only access for content management.
     */
    match /services/{serviceId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /projects collection. Only accessible to admins.
     * @path /projects/{projectId}
     * @allow (create) Authenticated admin can create a project.
     * @deny (create) Non-authenticated user cannot create a project.
     * @principle Enforces admin-only access for content management.
     */
    match /projects/{projectId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /blogPosts collection. Only accessible to admins.
     * @path /blogPosts/{blogPostId}
     * @allow (create) Authenticated admin can create a blog post.
     * @deny (create) Non-authenticated user cannot create a blog post.
     * @principle Enforces admin-only access for content management.
     */
    match /blogPosts/{blogPostId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /careers collection. Only accessible to admins.
     * @path /careers/{careerId}
     * @allow (create) Authenticated admin can create a career.
     * @deny (create) Non-authenticated user cannot create a career.
     * @principle Enforces admin-only access for content management.
     */
    match /careers/{careerId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /faqs collection. Only accessible to admins.
     * @path /faqs/{faqId}
     * @allow (create) Authenticated admin can create an FAQ.
     * @deny (create) Non-authenticated user cannot create an FAQ.
     * @principle Enforces admin-only access for content management.
     */
    match /faqs/{faqId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /teamMembers collection. Only accessible to admins.
     * @path /teamMembers/{teamMemberId}
     * @allow (create) Authenticated admin can create a team member.
     * @deny (create) Non-authenticated user cannot create a team member.
     * @principle Enforces admin-only access for content management.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /academyCourses collection. Only accessible to admins.
     * @path /academyCourses/{academyCourseId}
     * @allow (create) Authenticated admin can create an academy course.
     * @deny (create) Non-authenticated user cannot create an academy course.
     * @principle Enforces admin-only access for content management.
     */
    match /academyCourses/{academyCourseId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /academyCourses/{academyCourseId}/batches/{academyBatchId} subcollection. Only accessible to admins.
     * @path /academyCourses/{academyCourseId}/batches/{academyBatchId}
     * @allow (create) Authenticated admin can create an academy batch.
     * @deny (create) Non-authenticated user cannot create an academy batch.
     * @principle Enforces admin-only access for content management and hierarchical data ownership.
     */
    match /academyCourses/{academyCourseId}/batches/{academyBatchId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /privacyPolicy collection. Only accessible to admins.
     * @path /privacyPolicy/{privacyPolicyId}
     * @allow (create) Authenticated admin can create a privacy policy.
     * @deny (create) Non-authenticated user cannot create a privacy policy.
     * @principle Enforces admin-only access for content management.
     */
    match /privacyPolicy/{privacyPolicyId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /termsOfService collection. Only accessible to admins.
     * @path /termsOfService/{termsOfServiceId}
     * @allow (create) Authenticated admin can create terms of service.
     * @deny (create) Non-authenticated user cannot create terms of service.
     * @principle Enforces admin-only access for content management.
     */
    match /termsOfService/{termsOfServiceId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

   /**
    * @description Rules for the /announcements/nextBatch document.
    * @path /announcements/nextBatch
    * @allow (get, list) Public read access for displaying next batch information.
    * @deny (create, update, delete) Only admins can modify next batch information.
    * @principle Allows public read access while restricting write access to admins.
    */
    match /announcements/nextBatch {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /announcements/currentBatch document.
     * @path /announcements/currentBatch
     * @allow (get, list) Public read access for displaying current batch information.
     * @deny (create, update, delete) Only admins can modify current batch information.
     * @principle Allows public read access while restricting write access to admins.
     */
    match /announcements/currentBatch {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /announcements/videos/collection/{videoId} subcollection.
     * @path /announcements/videos/collection/{videoId}
     * @allow (get, list) Public read access for displaying announcement videos.
     * @deny (create, update, delete) Only admins can modify announcement videos.
     * @principle Allows public read access while restricting write access to admins.
     */
    match /announcements/videos/collection/{videoId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}